// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/cli"
)

type Parser struct {
	ParseStub        func(*cli.Context) error
	parseMutex       sync.RWMutex
	parseArgsForCall []struct {
		arg1 *cli.Context
	}
	parseReturns struct {
		result1 error
	}
	parseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Parser) Parse(arg1 *cli.Context) error {
	fake.parseMutex.Lock()
	ret, specificReturn := fake.parseReturnsOnCall[len(fake.parseArgsForCall)]
	fake.parseArgsForCall = append(fake.parseArgsForCall, struct {
		arg1 *cli.Context
	}{arg1})
	fake.recordInvocation("Parse", []interface{}{arg1})
	fake.parseMutex.Unlock()
	if fake.ParseStub != nil {
		return fake.ParseStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.parseReturns.result1
}

func (fake *Parser) ParseCallCount() int {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return len(fake.parseArgsForCall)
}

func (fake *Parser) ParseArgsForCall(i int) *cli.Context {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return fake.parseArgsForCall[i].arg1
}

func (fake *Parser) ParseReturns(result1 error) {
	fake.ParseStub = nil
	fake.parseReturns = struct {
		result1 error
	}{result1}
}

func (fake *Parser) ParseReturnsOnCall(i int, result1 error) {
	fake.ParseStub = nil
	if fake.parseReturnsOnCall == nil {
		fake.parseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.parseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Parser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Parser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cli.Parser = new(Parser)
